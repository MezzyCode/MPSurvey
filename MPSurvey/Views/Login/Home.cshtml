@model Model.JsonModels.Master.JsonUser
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/AdminLTE/_Layout.cshtml";
}

<style>
    .canvas-custom {
        max-height: 300px;
    }
</style>

<section class="card col-12">
    <div class="card-body">
        <h2 class="card-title text-center fw-bold">Welcome to Masinton Pasaribu Simpul Dashboard</h2>
        <label class="form-label" for="filterKelurahan">Filter Berdasarkan</label>
        <div class="input-group">
            @Html.DropDownList("Select Kelurahan", new SelectList(ViewBag.listKelurahan, "Name", "Name"), "Semua",
                     new { @id = "filterKelurahan", @class = "form-select" })
            <span class="input-group-text d-none" id="filterRwLabel">RW. </span>
            <select class="form-select d-none" id="filterRw">
                <option value="">Semua RW</option>
            </select>
            <button class="btn btn-primary" id="btnRefreshChart">Refresh Chart</button>
        </div>
        <h3 class="card-title text-center fw-bold pb-0 mb-0">Jumlah Responden</h3>
        <h3 class="card-title text-center fw-bold pb-0 mb-0" id="totalCount"></h3>
    </div>
</section>

<chart-container chartId="c1Chart"
    title="Apakah Bapak/Ibu/Sdr/i telah terdaftar sebagai pemilih pada Pemilu 14 Februari 2024?"></chart-container>
<chart-container chartId="c2Chart" title="Apakah Bapak/Ibu/Sdr/i mengenal Masinton Pasaribu?"></chart-container>
<chart-container chartId="c3Chart"
    title="Apakah Bapak/Ibu/Sdr/i menegtahui Masinton Pasaribu dicalonkan kembali oleh Partai PDI Perjuangan sebagai Caleg DPR RI?"></chart-container>
<chart-container chartId="c4Chart"
    title="Bersediakah Bapak/Ibu/Sdr/i memilih Caleg DPR RI, nomor 7 Masinton Pasaribu, S.H. dari Partai PDI Perjuangan?"></chart-container>

@section myScripts {
    <script src="~/plugins/jquery/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            $("form").submit(function () {
                ShowLoading();
            });
            const colorPalette1 = [
                'rgba(0, 0, 255, 0.5)',
                'rgba(255, 0, 0, 0.5)',
                'rgba(0, 128, 0, 0.5)',
                'rgba(128, 128, 0, 0.5)',
                'rgba(0, 0, 128, 0.5)',
                'rgba(128, 0, 128, 0.5)',
                'rgba(0, 128, 128, 0.5)',
                'rgba(255, 0, 255, 0.5)',
                'rgba(128, 128, 128, 0.5)',
                'rgba(192, 192, 192, 0.5)',
                'rgba(255, 255, 0, 0.5)',
                'rgba(0, 255, 255, 0.5)',
                'rgba(255, 128, 0, 0.5)',
                'rgba(0, 255, 128, 0.5)',
                'rgba(128, 0, 255, 0.5)',
                'rgba(255, 128, 128, 0.5)',
                'rgba(128, 255, 128, 0.5)',
                'rgba(128, 128, 255, 0.5)',
                'rgba(192, 0, 0, 0.5)',
                'rgba(0, 192, 0, 0.5)',
                'rgba(192, 192, 0, 0.5)',
                'rgba(0, 0, 192, 0.5)',
                'rgba(192, 0, 192, 0.5)',
                'rgba(0, 192, 192, 0.5)',
                'rgba(192, 192, 192, 0.5)',
                'rgba(64, 0, 0, 0.5)',
                'rgba(0, 64, 0, 0.5)',
                'rgba(64, 64, 0, 0.5)',
                'rgba(0, 0, 64, 0.5)',
                'rgba(64, 0, 64, 0.5)',
                'rgba(0, 64, 64, 0.5)',
                'rgba(64, 64, 64, 0.5)',
                'rgba(128, 0, 64, 0.5)',
                'rgba(0, 128, 64, 0.5)',
                'rgba(128, 128, 64, 0.5)',
                'rgba(0, 0, 64, 0.5)',
                'rgba(128, 0, 128, 0.5)',
                'rgba(0, 128, 128, 0.5)',
                'rgba(192, 0, 64, 0.5)',
                'rgba(64, 128, 0, 0.5)',
                'rgba(192, 192, 64, 0.5)',
                'rgba(64, 0, 128, 0.5)',
                'rgba(192, 0, 192, 0.5)',
                'rgba(64, 192, 192, 0.5)',
                'rgba(192, 192, 192, 0.5)',
                'rgba(64, 64, 192, 0.5)',
                'rgba(192, 64, 64, 0.5)',
                'rgba(64, 192, 64, 0.5)'
            ];

        @* async function getC1Data() {
            try {
            const response = await fetch("/Master/Answer2/C1Count", {
            method: "POST",
            headers: { "Content-Type": "application/json", },
            body: JSON.stringify({
            Kelurahan: document.getElementById('filterKelurahan').value,
            Rw: document.getElementById('filterRw').value
            }),
            });
            if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
            }
            const data = await response.json();
            return data;
            } catch (error) {
            console.error("Error:", error);
            }
            } *@

        @* getC1Data().then(data => console.log(data)); *@

                class ChartContainer extends HTMLElement {
                    render() {
                        const title = this.getAttribute('title');
                        const chartId = this.getAttribute('chartId');
                        this.classList.add('col-md-6', 'p-1');
                        this.innerHTML = `
                                <div class="card h-100">
                                    <div class="card-body">
                                    <h2 class="card-title text-center">${title}</h2>
                                    <div class="canvas-custom"> <canvas id="${chartId}"></canvas></div>
                                    </div>
                                </div>`;
                    }

                    connectedCallback() {
                        if (!this.rendered) {
                            this.render();
                            this.rendered = true;
                        }
                    }
                }

            customElements.define('chart-container', ChartContainer);

            async function showC1Chart() {
                var chartData = {
                    datasets: [{
                        data: [],
                        backgroundColor: []
                    }],
                    labels: [] // Labels for each section
                };

                // Assume you have some logic to fetch data from the server
                var data = await $.ajax({
                    url: "/Master/Answer2/C1Count",
                    method: "POST",
                    data: {
                        Kelurahan: $('#filterKelurahan').val(),
                        Rw: $('#filterRw').val()
                    }
                });

                data.forEach((item, index) => {
                    chartData.datasets[0].data.push(item.count);
                    chartData.labels.push(item.label);
                    chartData.datasets[0].backgroundColor.push(colorPalette1[index] || 'rgba(0, 0, 0, 0.1)');
                    totalCount += item.count;
                });
                document.getElementById("totalCount").textContent = totalCount;


                document.getElementById('totalCount').textContent = totalCount

                createCChart(chartData, "c1Chart");
            }

            async function showC2Chart() {
                var chartData = {
                    datasets: [{
                        data: [],
                        backgroundColor: []
                    }],
                    labels: [] // Labels for each section
                };

                // Assume you have some logic to fetch data from the server
                var data = await $.ajax({
                    url: "/Master/Answer2/C2Count",
                    method: "POST",
                    data: {
                        Kelurahan: $('#filterKelurahan').val(),
                        Rw: $('#filterRw').val()
                    }
                });

                data.forEach((item, index) => {
                    chartData.datasets[0].data.push(item.count);
                    chartData.labels.push(item.label);
                    chartData.datasets[0].backgroundColor.push(colorPalette1[index] || 'rgba(0, 0, 0, 0.1)');
                });

                createCChart(chartData, "c2Chart");
            }

            async function showC3Chart() {
                var chartData = {
                    datasets: [{
                        data: [],
                        backgroundColor: []
                    }],
                    labels: [] // Labels for each section
                };

                // Assume you have some logic to fetch data from the server
                var data = await $.ajax({
                    url: "/Master/Answer2/C3Count",
                    method: "POST",
                    data: {
                        Kelurahan: $('#filterKelurahan').val(),
                        Rw: $('#filterRw').val()
                    }
                });

                data.forEach((item, index) => {
                    chartData.datasets[0].data.push(item.count);
                    chartData.labels.push(item.label);
                    chartData.datasets[0].backgroundColor.push(colorPalette1[index] || 'rgba(0, 0, 0, 0.1)');
                });

                createCChart(chartData, "c3Chart");
            }

            async function showC4Chart() {
                var chartData = {
                    datasets: [{
                        data: [],
                        backgroundColor: []
                    }],
                    labels: [] // Labels for each section
                };

                // Assume you have some logic to fetch data from the server
                var data = await $.ajax({
                    url: "/Master/Answer2/C4Count",
                    method: "POST",
                    data: {
                        Kelurahan: $('#filterKelurahan').val(),
                        Rw: $('#filterRw').val()
                    }
                });

                data.forEach((item, index) => {
                    chartData.datasets[0].data.push(item.count);
                    chartData.labels.push(item.label);
                    chartData.datasets[0].backgroundColor.push(colorPalette1[index] || 'rgba(0, 0, 0, 0.1)');
                });

                createCChart(chartData, "c4Chart");
            }

            function createCChart(chartData, chartId) {
                const existingChart = Chart.getChart(chartId);

                if (existingChart) {
                    existingChart.destroy();
                }

                // Calculate percentages
                chartData.datasets[0].data = chartData.datasets[0].data.map(value => (value / getTotalSum(chartData.datasets[0].data)) * 100);

                var options = {
                    tooltips: {
                        enabled: false
                    },
                    plugins: {
                        datalabels: {
                            formatter: (value, ctx) => {
                                return `${value.toFixed(2)}%`;
                            },
                            color: '#fff',
                        }
                    },
                    maintainAspectRatio: false
                };

                const myChart = new Chart(chartId, {
                    type: "pie",
                    data: chartData,
                    options: options
                });
            }

            // Function to calculate total sum
            function getTotalSum(data) {
                return data.reduce((sum, value) => sum + value, 0);
            }

            async function repeatFetch() {
                showC1Chart();
                showC2Chart();
                showC3Chart();
                showC4Chart();
            }

            (async () => {
                repeatFetch();
            })();

            $("#btnRefreshChart").on("click", async function () {
                showC1Chart();
                showC2Chart();
                showC3Chart();
                showC4Chart();
            })
            // Show and Hide Rw Filter
            function hideRwFilter() {
                document.getElementById("filterRw").classList.add('d-none');
                document.getElementById("filterRwLabel").classList.add('d-none');
            }
            function showRwFilter() {
                document.getElementById("filterRw").classList.remove('d-none');
                document.getElementById("filterRwLabel").classList.remove('d-none');
            }
            const rwList = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.listRw))');
            document.getElementById("filterKelurahan").addEventListener("change", () => {
                const selectedKelurahan = document.getElementById("filterKelurahan").value;
                const rwSelect = document.getElementById("filterRw");
                const rwSelectLabel = document.getElementById("filterRwLabel");
                selectedKelurahan === '' ? hideRwFilter() : showRwFilter();
                rwSelect.innerHTML = '';

                const filterRw = rwList.filter(item => item.description === selectedKelurahan);

                if (filterRw.length > 0 && filterRw[0].value) {
                    const maxValue = parseInt(filterRw[0].value, 10);

                    for (let i = 1; i <= maxValue; i++) {
                        const paddedValue = i.toString().padStart(3, '0'); // Pad with leading zeros
                        const option = document.createElement("option");
                        option.value = paddedValue;
                        option.text = paddedValue;
                        rwSelect.appendChild(option);
                    }
                }
                else {
                    for (let i = 1; i <= 20; i++) {
                        const paddedValue = i.toString().padStart(3, '0'); // Pad with leading zeros
                        const option = document.createElement("option");
                        option.value = paddedValue;
                        option.text = paddedValue;
                        rwSelect.appendChild(option);
                    }
                }

                const defaultOption = document.createElement("option");
                defaultOption.value = '';
                defaultOption.text = 'Semua';
                rwSelect.appendChild(defaultOption);

                rwSelect.value = '';
            });

            //function setTargetHeight() {
            //    $("#c1CountWrapper").height($("#religionChartWrapper").height());
            //}

            //$(window).on("resize", setTargetHeight());

            //setTargetHeight();

        @if (TempData["notification"] != null)
        {
            @Html.Raw(TempData["notification"])
        }

                                                                                                                                                                        });

    </script>

}